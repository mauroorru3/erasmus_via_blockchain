syntax = "proto3";
package university_chain_it.universitychainit;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "universitychainit/params.proto";
import "universitychainit/professors_exams.proto";
import "universitychainit/exams_info.proto";
import "universitychainit/annual_taxes.proto";
import "universitychainit/erasmus_contribution.proto";
import "universitychainit/erasmus_exams.proto";
import "universitychainit/erasmus_career.proto";
import "universitychainit/stored_student.proto";
import "universitychainit/university_info.proto";
// this line is used by starport scaffolding # 1
import "universitychainit/erasmus_info.proto";
import "universitychainit/taxes_info.proto";
import "universitychainit/contact_info.proto";
import "universitychainit/residence_info.proto";
import "universitychainit/personal_info.proto";
import "universitychainit/transcript_of_records.proto";
import "universitychainit/student_info.proto";

option go_package = "university_chain_it/x/universitychainit/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/university_chain_it/universitychainit/params";
  }
  // Queries a ProfessorsExams by index.
	rpc ProfessorsExams(QueryGetProfessorsExamsRequest) returns (QueryGetProfessorsExamsResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/professors_exams/{examName}";
	}

	// Queries a list of ProfessorsExams items.
	rpc ProfessorsExamsAll(QueryAllProfessorsExamsRequest) returns (QueryAllProfessorsExamsResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/professors_exams";
	}

// Queries a StudentInfo by index.
	rpc StudentInfo(QueryGetStudentInfoRequest) returns (QueryGetStudentInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/student_info";
	}
// Queries a ExamsInfo by index.
	rpc ExamsInfo(QueryGetExamsInfoRequest) returns (QueryGetExamsInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/exams_info/{examName}";
	}

	// Queries a list of ExamsInfo items.
	rpc ExamsInfoAll(QueryAllExamsInfoRequest) returns (QueryAllExamsInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/exams_info";
	}

// Queries a TranscriptOfRecords by index.
	rpc TranscriptOfRecords(QueryGetTranscriptOfRecordsRequest) returns (QueryGetTranscriptOfRecordsResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/transcript_of_records";
	}
// Queries a PersonalInfo by index.
	rpc PersonalInfo(QueryGetPersonalInfoRequest) returns (QueryGetPersonalInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/personal_info";
	}
// Queries a ResidenceInfo by index.
	rpc ResidenceInfo(QueryGetResidenceInfoRequest) returns (QueryGetResidenceInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/residence_info";
	}
// Queries a ContactInfo by index.
	rpc ContactInfo(QueryGetContactInfoRequest) returns (QueryGetContactInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/contact_info";
	}
// Queries a AnnualTaxes by id.
	rpc AnnualTaxes(QueryGetAnnualTaxesRequest) returns (QueryGetAnnualTaxesResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/annual_taxes/{id}";
	}

	// Queries a list of AnnualTaxes items.
	rpc AnnualTaxesAll(QueryAllAnnualTaxesRequest) returns (QueryAllAnnualTaxesResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/annual_taxes";
	}

// Queries a TaxesInfo by index.
	rpc TaxesInfo(QueryGetTaxesInfoRequest) returns (QueryGetTaxesInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/taxes_info";
	}
// Queries a ErasmusContribution by index.
	rpc ErasmusContribution(QueryGetErasmusContributionRequest) returns (QueryGetErasmusContributionResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_contribution";
	}
// Queries a ErasmusExams by index.
	rpc ErasmusExams(QueryGetErasmusExamsRequest) returns (QueryGetErasmusExamsResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_exams/{examName}";
	}

	// Queries a list of ErasmusExams items.
	rpc ErasmusExamsAll(QueryAllErasmusExamsRequest) returns (QueryAllErasmusExamsResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_exams";
	}

// Queries a ErasmusCareer by id.
	rpc ErasmusCareer(QueryGetErasmusCareerRequest) returns (QueryGetErasmusCareerResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_career/{id}";
	}

	// Queries a list of ErasmusCareer items.
	rpc ErasmusCareerAll(QueryAllErasmusCareerRequest) returns (QueryAllErasmusCareerResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_career";
	}

// Queries a ErasmusInfo by index.
	rpc ErasmusInfo(QueryGetErasmusInfoRequest) returns (QueryGetErasmusInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/erasmus_info";
	}
// Queries a StoredStudent by index.
	rpc StoredStudent(QueryGetStoredStudentRequest) returns (QueryGetStoredStudentResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/stored_student/{index}";
	}

	// Queries a list of StoredStudent items.
	rpc StoredStudentAll(QueryAllStoredStudentRequest) returns (QueryAllStoredStudentResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/stored_student";
	}

// Queries a UniversityInfo by index.
	rpc UniversityInfo(QueryGetUniversityInfoRequest) returns (QueryGetUniversityInfoResponse) {
		option (google.api.http).get = "/university_chain_it/universitychainit/university_info";
	}
// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetProfessorsExamsRequest {
	  string examName = 1;

}

message QueryGetProfessorsExamsResponse {
	ProfessorsExams professorsExams = 1 [(gogoproto.nullable) = false];
}

message QueryAllProfessorsExamsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProfessorsExamsResponse {
	repeated ProfessorsExams professorsExams = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetStudentInfoRequest {}

message QueryGetStudentInfoResponse {
	StudentInfo StudentInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetExamsInfoRequest {
	  string examName = 1;

}

message QueryGetExamsInfoResponse {
	ExamsInfo examsInfo = 1 [(gogoproto.nullable) = false];
}

message QueryAllExamsInfoRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllExamsInfoResponse {
	repeated ExamsInfo examsInfo = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTranscriptOfRecordsRequest {}

message QueryGetTranscriptOfRecordsResponse {
	TranscriptOfRecords TranscriptOfRecords = 1 [(gogoproto.nullable) = false];
}
message QueryGetPersonalInfoRequest {}

message QueryGetPersonalInfoResponse {
	PersonalInfo PersonalInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetResidenceInfoRequest {}

message QueryGetResidenceInfoResponse {
	ResidenceInfo ResidenceInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetContactInfoRequest {}

message QueryGetContactInfoResponse {
	ContactInfo ContactInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetAnnualTaxesRequest {
	uint64 id = 1;
}

message QueryGetAnnualTaxesResponse {
	AnnualTaxes AnnualTaxes = 1 [(gogoproto.nullable) = false];
}

message QueryAllAnnualTaxesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAnnualTaxesResponse {
	repeated AnnualTaxes AnnualTaxes = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTaxesInfoRequest {}

message QueryGetTaxesInfoResponse {
	TaxesInfo TaxesInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetErasmusContributionRequest {}

message QueryGetErasmusContributionResponse {
	ErasmusContribution ErasmusContribution = 1 [(gogoproto.nullable) = false];
}
message QueryGetErasmusExamsRequest {
	  string examName = 1;

}

message QueryGetErasmusExamsResponse {
	ErasmusExams erasmusExams = 1 [(gogoproto.nullable) = false];
}

message QueryAllErasmusExamsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllErasmusExamsResponse {
	repeated ErasmusExams erasmusExams = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetErasmusCareerRequest {
	uint64 id = 1;
}

message QueryGetErasmusCareerResponse {
	ErasmusCareer ErasmusCareer = 1 [(gogoproto.nullable) = false];
}

message QueryAllErasmusCareerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllErasmusCareerResponse {
	repeated ErasmusCareer ErasmusCareer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetErasmusInfoRequest {}

message QueryGetErasmusInfoResponse {
	ErasmusInfo ErasmusInfo = 1 [(gogoproto.nullable) = false];
}
message QueryGetStoredStudentRequest {
	  string index = 1;

}

message QueryGetStoredStudentResponse {
	StoredStudent storedStudent = 1 [(gogoproto.nullable) = false];
}

message QueryAllStoredStudentRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredStudentResponse {
	repeated StoredStudent storedStudent = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetUniversityInfoRequest {}

message QueryGetUniversityInfoResponse {
	UniversityInfo UniversityInfo = 1 [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
