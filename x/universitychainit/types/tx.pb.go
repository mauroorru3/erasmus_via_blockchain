// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgConfigureChain struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgConfigureChain) Reset()         { *m = MsgConfigureChain{} }
func (m *MsgConfigureChain) String() string { return proto.CompactTextString(m) }
func (*MsgConfigureChain) ProtoMessage()    {}
func (*MsgConfigureChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{0}
}
func (m *MsgConfigureChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfigureChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfigureChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfigureChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfigureChain.Merge(m, src)
}
func (m *MsgConfigureChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfigureChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfigureChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfigureChain proto.InternalMessageInfo

func (m *MsgConfigureChain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgConfigureChainResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgConfigureChainResponse) Reset()         { *m = MsgConfigureChainResponse{} }
func (m *MsgConfigureChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfigureChainResponse) ProtoMessage()    {}
func (*MsgConfigureChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{1}
}
func (m *MsgConfigureChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfigureChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfigureChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfigureChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfigureChainResponse.Merge(m, src)
}
func (m *MsgConfigureChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfigureChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfigureChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfigureChainResponse proto.InternalMessageInfo

func (m *MsgConfigureChainResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgRegisterNewStudent struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University     string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Surname        string `protobuf:"bytes,4,opt,name=surname,proto3" json:"surname,omitempty"`
	CourseType     string `protobuf:"bytes,5,opt,name=courseType,proto3" json:"courseType,omitempty"`
	CourseOfStudy  string `protobuf:"bytes,6,opt,name=courseOfStudy,proto3" json:"courseOfStudy,omitempty"`
	DepartmentName string `protobuf:"bytes,7,opt,name=departmentName,proto3" json:"departmentName,omitempty"`
}

func (m *MsgRegisterNewStudent) Reset()         { *m = MsgRegisterNewStudent{} }
func (m *MsgRegisterNewStudent) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNewStudent) ProtoMessage()    {}
func (*MsgRegisterNewStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{2}
}
func (m *MsgRegisterNewStudent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNewStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNewStudent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNewStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNewStudent.Merge(m, src)
}
func (m *MsgRegisterNewStudent) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNewStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNewStudent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNewStudent proto.InternalMessageInfo

func (m *MsgRegisterNewStudent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetCourseType() string {
	if m != nil {
		return m.CourseType
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetCourseOfStudy() string {
	if m != nil {
		return m.CourseOfStudy
	}
	return ""
}

func (m *MsgRegisterNewStudent) GetDepartmentName() string {
	if m != nil {
		return m.DepartmentName
	}
	return ""
}

type MsgRegisterNewStudentResponse struct {
	StudentIndex string `protobuf:"bytes,1,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
}

func (m *MsgRegisterNewStudentResponse) Reset()         { *m = MsgRegisterNewStudentResponse{} }
func (m *MsgRegisterNewStudentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterNewStudentResponse) ProtoMessage()    {}
func (*MsgRegisterNewStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{3}
}
func (m *MsgRegisterNewStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterNewStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterNewStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterNewStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterNewStudentResponse.Merge(m, src)
}
func (m *MsgRegisterNewStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterNewStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterNewStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterNewStudentResponse proto.InternalMessageInfo

func (m *MsgRegisterNewStudentResponse) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

type MsgInsertStudentPersonalInfo struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University         string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	StudentIndex       string `protobuf:"bytes,3,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
	Gender             string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	DateOfBirth        string `protobuf:"bytes,5,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	PrimaryNationality string `protobuf:"bytes,6,opt,name=primaryNationality,proto3" json:"primaryNationality,omitempty"`
	CountryOfBirth     string `protobuf:"bytes,7,opt,name=countryOfBirth,proto3" json:"countryOfBirth,omitempty"`
	ProvinceOfBirth    string `protobuf:"bytes,8,opt,name=provinceOfBirth,proto3" json:"provinceOfBirth,omitempty"`
	TownOfBirth        string `protobuf:"bytes,9,opt,name=townOfBirth,proto3" json:"townOfBirth,omitempty"`
	TaxCode            string `protobuf:"bytes,10,opt,name=taxCode,proto3" json:"taxCode,omitempty"`
	IncomeBracket      uint32 `protobuf:"varint,11,opt,name=incomeBracket,proto3" json:"incomeBracket,omitempty"`
}

func (m *MsgInsertStudentPersonalInfo) Reset()         { *m = MsgInsertStudentPersonalInfo{} }
func (m *MsgInsertStudentPersonalInfo) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentPersonalInfo) ProtoMessage()    {}
func (*MsgInsertStudentPersonalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{4}
}
func (m *MsgInsertStudentPersonalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentPersonalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentPersonalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentPersonalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentPersonalInfo.Merge(m, src)
}
func (m *MsgInsertStudentPersonalInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentPersonalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentPersonalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentPersonalInfo proto.InternalMessageInfo

func (m *MsgInsertStudentPersonalInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetDateOfBirth() string {
	if m != nil {
		return m.DateOfBirth
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetPrimaryNationality() string {
	if m != nil {
		return m.PrimaryNationality
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetCountryOfBirth() string {
	if m != nil {
		return m.CountryOfBirth
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetProvinceOfBirth() string {
	if m != nil {
		return m.ProvinceOfBirth
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetTownOfBirth() string {
	if m != nil {
		return m.TownOfBirth
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetTaxCode() string {
	if m != nil {
		return m.TaxCode
	}
	return ""
}

func (m *MsgInsertStudentPersonalInfo) GetIncomeBracket() uint32 {
	if m != nil {
		return m.IncomeBracket
	}
	return 0
}

type MsgInsertStudentPersonalInfoResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgInsertStudentPersonalInfoResponse) Reset()         { *m = MsgInsertStudentPersonalInfoResponse{} }
func (m *MsgInsertStudentPersonalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentPersonalInfoResponse) ProtoMessage()    {}
func (*MsgInsertStudentPersonalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{5}
}
func (m *MsgInsertStudentPersonalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentPersonalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentPersonalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentPersonalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentPersonalInfoResponse.Merge(m, src)
}
func (m *MsgInsertStudentPersonalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentPersonalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentPersonalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentPersonalInfoResponse proto.InternalMessageInfo

func (m *MsgInsertStudentPersonalInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgInsertStudentContactInfo struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University     string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	StudentIndex   string `protobuf:"bytes,3,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
	ContactAddress string `protobuf:"bytes,4,opt,name=contactAddress,proto3" json:"contactAddress,omitempty"`
	Email          string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	MobilePhone    string `protobuf:"bytes,6,opt,name=mobilePhone,proto3" json:"mobilePhone,omitempty"`
}

func (m *MsgInsertStudentContactInfo) Reset()         { *m = MsgInsertStudentContactInfo{} }
func (m *MsgInsertStudentContactInfo) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentContactInfo) ProtoMessage()    {}
func (*MsgInsertStudentContactInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{6}
}
func (m *MsgInsertStudentContactInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentContactInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentContactInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentContactInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentContactInfo.Merge(m, src)
}
func (m *MsgInsertStudentContactInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentContactInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentContactInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentContactInfo proto.InternalMessageInfo

func (m *MsgInsertStudentContactInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInsertStudentContactInfo) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgInsertStudentContactInfo) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

func (m *MsgInsertStudentContactInfo) GetContactAddress() string {
	if m != nil {
		return m.ContactAddress
	}
	return ""
}

func (m *MsgInsertStudentContactInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MsgInsertStudentContactInfo) GetMobilePhone() string {
	if m != nil {
		return m.MobilePhone
	}
	return ""
}

type MsgInsertStudentContactInfoResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgInsertStudentContactInfoResponse) Reset()         { *m = MsgInsertStudentContactInfoResponse{} }
func (m *MsgInsertStudentContactInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentContactInfoResponse) ProtoMessage()    {}
func (*MsgInsertStudentContactInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{7}
}
func (m *MsgInsertStudentContactInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentContactInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentContactInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentContactInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentContactInfoResponse.Merge(m, src)
}
func (m *MsgInsertStudentContactInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentContactInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentContactInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentContactInfoResponse proto.InternalMessageInfo

func (m *MsgInsertStudentContactInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgInsertStudentResidenceInfo struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University   string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	StudentIndex string `protobuf:"bytes,3,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
	Country      string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Province     string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	Town         string `protobuf:"bytes,6,opt,name=town,proto3" json:"town,omitempty"`
	PostCode     string `protobuf:"bytes,7,opt,name=postCode,proto3" json:"postCode,omitempty"`
	Address      string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	HouseNumber  string `protobuf:"bytes,9,opt,name=houseNumber,proto3" json:"houseNumber,omitempty"`
	HomePhone    string `protobuf:"bytes,10,opt,name=homePhone,proto3" json:"homePhone,omitempty"`
}

func (m *MsgInsertStudentResidenceInfo) Reset()         { *m = MsgInsertStudentResidenceInfo{} }
func (m *MsgInsertStudentResidenceInfo) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentResidenceInfo) ProtoMessage()    {}
func (*MsgInsertStudentResidenceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{8}
}
func (m *MsgInsertStudentResidenceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentResidenceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentResidenceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentResidenceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentResidenceInfo.Merge(m, src)
}
func (m *MsgInsertStudentResidenceInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentResidenceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentResidenceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentResidenceInfo proto.InternalMessageInfo

func (m *MsgInsertStudentResidenceInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetTown() string {
	if m != nil {
		return m.Town
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetPostCode() string {
	if m != nil {
		return m.PostCode
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetHouseNumber() string {
	if m != nil {
		return m.HouseNumber
	}
	return ""
}

func (m *MsgInsertStudentResidenceInfo) GetHomePhone() string {
	if m != nil {
		return m.HomePhone
	}
	return ""
}

type MsgInsertStudentResidenceInfoResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgInsertStudentResidenceInfoResponse) Reset()         { *m = MsgInsertStudentResidenceInfoResponse{} }
func (m *MsgInsertStudentResidenceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInsertStudentResidenceInfoResponse) ProtoMessage()    {}
func (*MsgInsertStudentResidenceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{9}
}
func (m *MsgInsertStudentResidenceInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertStudentResidenceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertStudentResidenceInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertStudentResidenceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertStudentResidenceInfoResponse.Merge(m, src)
}
func (m *MsgInsertStudentResidenceInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertStudentResidenceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertStudentResidenceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertStudentResidenceInfoResponse proto.InternalMessageInfo

func (m *MsgInsertStudentResidenceInfoResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgInsertExamGrade struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University   string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	StudentIndex string `protobuf:"bytes,3,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
	ExamName     string `protobuf:"bytes,4,opt,name=examName,proto3" json:"examName,omitempty"`
	Grade        string `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (m *MsgInsertExamGrade) Reset()         { *m = MsgInsertExamGrade{} }
func (m *MsgInsertExamGrade) String() string { return proto.CompactTextString(m) }
func (*MsgInsertExamGrade) ProtoMessage()    {}
func (*MsgInsertExamGrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{10}
}
func (m *MsgInsertExamGrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertExamGrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertExamGrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertExamGrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertExamGrade.Merge(m, src)
}
func (m *MsgInsertExamGrade) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertExamGrade) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertExamGrade.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertExamGrade proto.InternalMessageInfo

func (m *MsgInsertExamGrade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInsertExamGrade) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgInsertExamGrade) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

func (m *MsgInsertExamGrade) GetExamName() string {
	if m != nil {
		return m.ExamName
	}
	return ""
}

func (m *MsgInsertExamGrade) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

type MsgInsertExamGradeResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgInsertExamGradeResponse) Reset()         { *m = MsgInsertExamGradeResponse{} }
func (m *MsgInsertExamGradeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInsertExamGradeResponse) ProtoMessage()    {}
func (*MsgInsertExamGradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{11}
}
func (m *MsgInsertExamGradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInsertExamGradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInsertExamGradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInsertExamGradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInsertExamGradeResponse.Merge(m, src)
}
func (m *MsgInsertExamGradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInsertExamGradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInsertExamGradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInsertExamGradeResponse proto.InternalMessageInfo

func (m *MsgInsertExamGradeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type MsgPayTaxes struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	University   string `protobuf:"bytes,2,opt,name=university,proto3" json:"university,omitempty"`
	StudentIndex string `protobuf:"bytes,3,opt,name=studentIndex,proto3" json:"studentIndex,omitempty"`
}

func (m *MsgPayTaxes) Reset()         { *m = MsgPayTaxes{} }
func (m *MsgPayTaxes) String() string { return proto.CompactTextString(m) }
func (*MsgPayTaxes) ProtoMessage()    {}
func (*MsgPayTaxes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{12}
}
func (m *MsgPayTaxes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayTaxes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayTaxes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayTaxes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayTaxes.Merge(m, src)
}
func (m *MsgPayTaxes) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayTaxes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayTaxes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayTaxes proto.InternalMessageInfo

func (m *MsgPayTaxes) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPayTaxes) GetUniversity() string {
	if m != nil {
		return m.University
	}
	return ""
}

func (m *MsgPayTaxes) GetStudentIndex() string {
	if m != nil {
		return m.StudentIndex
	}
	return ""
}

type MsgPayTaxesResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgPayTaxesResponse) Reset()         { *m = MsgPayTaxesResponse{} }
func (m *MsgPayTaxesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPayTaxesResponse) ProtoMessage()    {}
func (*MsgPayTaxesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5083021dc5214058, []int{13}
}
func (m *MsgPayTaxesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPayTaxesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPayTaxesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPayTaxesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPayTaxesResponse.Merge(m, src)
}
func (m *MsgPayTaxesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPayTaxesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPayTaxesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPayTaxesResponse proto.InternalMessageInfo

func (m *MsgPayTaxesResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgConfigureChain)(nil), "university_chain_it.universitychainit.MsgConfigureChain")
	proto.RegisterType((*MsgConfigureChainResponse)(nil), "university_chain_it.universitychainit.MsgConfigureChainResponse")
	proto.RegisterType((*MsgRegisterNewStudent)(nil), "university_chain_it.universitychainit.MsgRegisterNewStudent")
	proto.RegisterType((*MsgRegisterNewStudentResponse)(nil), "university_chain_it.universitychainit.MsgRegisterNewStudentResponse")
	proto.RegisterType((*MsgInsertStudentPersonalInfo)(nil), "university_chain_it.universitychainit.MsgInsertStudentPersonalInfo")
	proto.RegisterType((*MsgInsertStudentPersonalInfoResponse)(nil), "university_chain_it.universitychainit.MsgInsertStudentPersonalInfoResponse")
	proto.RegisterType((*MsgInsertStudentContactInfo)(nil), "university_chain_it.universitychainit.MsgInsertStudentContactInfo")
	proto.RegisterType((*MsgInsertStudentContactInfoResponse)(nil), "university_chain_it.universitychainit.MsgInsertStudentContactInfoResponse")
	proto.RegisterType((*MsgInsertStudentResidenceInfo)(nil), "university_chain_it.universitychainit.MsgInsertStudentResidenceInfo")
	proto.RegisterType((*MsgInsertStudentResidenceInfoResponse)(nil), "university_chain_it.universitychainit.MsgInsertStudentResidenceInfoResponse")
	proto.RegisterType((*MsgInsertExamGrade)(nil), "university_chain_it.universitychainit.MsgInsertExamGrade")
	proto.RegisterType((*MsgInsertExamGradeResponse)(nil), "university_chain_it.universitychainit.MsgInsertExamGradeResponse")
	proto.RegisterType((*MsgPayTaxes)(nil), "university_chain_it.universitychainit.MsgPayTaxes")
	proto.RegisterType((*MsgPayTaxesResponse)(nil), "university_chain_it.universitychainit.MsgPayTaxesResponse")
}

func init() { proto.RegisterFile("universitychainit/tx.proto", fileDescriptor_5083021dc5214058) }

var fileDescriptor_5083021dc5214058 = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4b, 0x8f, 0x1b, 0x45,
	0x10, 0xde, 0x89, 0xb3, 0xbb, 0xde, 0x5a, 0x92, 0x88, 0xe6, 0xa1, 0xc9, 0x10, 0xac, 0xd5, 0x90,
	0xa0, 0xbd, 0xac, 0x57, 0x4a, 0x38, 0x00, 0xe2, 0x15, 0x3b, 0x28, 0x5a, 0xc0, 0xce, 0xca, 0xe4,
	0xc4, 0x25, 0xea, 0x9d, 0x29, 0x8f, 0x47, 0xd9, 0xe9, 0xb6, 0xba, 0x7b, 0x12, 0x9b, 0xdf, 0x80,
	0x04, 0x47, 0xc4, 0x99, 0x13, 0x12, 0x12, 0x7f, 0x80, 0x3b, 0x17, 0xa4, 0x1c, 0x91, 0xb8, 0xa0,
	0xdd, 0x33, 0xff, 0x21, 0xea, 0x9e, 0x9e, 0xf1, 0xfb, 0x11, 0xef, 0xe3, 0xe6, 0xfa, 0xba, 0xeb,
	0xab, 0xaf, 0xbf, 0x2a, 0x77, 0x6b, 0xc0, 0x4b, 0x59, 0xfc, 0x0c, 0x85, 0x8c, 0x55, 0x3f, 0xe8,
	0xd0, 0x98, 0xc5, 0x6a, 0x5f, 0xf5, 0xaa, 0x5d, 0xc1, 0x15, 0x27, 0x77, 0x06, 0x6b, 0x4f, 0xcc,
	0xe2, 0x93, 0x58, 0x55, 0x27, 0xf6, 0xfb, 0x7b, 0xf0, 0x7a, 0x43, 0x46, 0x75, 0xce, 0xda, 0x71,
	0x94, 0x0a, 0xac, 0x6b, 0x98, 0xb8, 0xb0, 0x19, 0x08, 0xa4, 0x8a, 0x0b, 0xd7, 0xd9, 0x71, 0x76,
	0xb7, 0x5a, 0x79, 0xe8, 0xdf, 0x83, 0x9b, 0x13, 0xdb, 0x5b, 0x28, 0xbb, 0x9c, 0x49, 0x24, 0x6f,
	0xc3, 0x86, 0x54, 0x54, 0xa5, 0xd2, 0x64, 0xad, 0xb7, 0x6c, 0xe4, 0xff, 0xef, 0xc0, 0x5b, 0x0d,
	0x19, 0xb5, 0x30, 0x8a, 0xa5, 0x42, 0xd1, 0xc4, 0xe7, 0xdf, 0xaa, 0x34, 0x44, 0xa6, 0x66, 0x17,
	0x22, 0x15, 0x80, 0x81, 0x58, 0xf7, 0x8a, 0x59, 0x1c, 0x42, 0x08, 0x81, 0xab, 0x8c, 0x26, 0xe8,
	0x96, 0xcc, 0x8a, 0xf9, 0xad, 0xd9, 0x64, 0x2a, 0x0c, 0x7c, 0x35, 0x63, 0xb3, 0xa1, 0x66, 0x0b,
	0x78, 0x2a, 0x24, 0x3e, 0xee, 0x77, 0xd1, 0x5d, 0xcf, 0xd8, 0x06, 0x08, 0xb9, 0x0d, 0xd7, 0xb2,
	0xe8, 0x51, 0x5b, 0x4b, 0xeb, 0xbb, 0x1b, 0x66, 0xcb, 0x28, 0x48, 0xde, 0x87, 0xeb, 0x21, 0x76,
	0xa9, 0x50, 0x09, 0x32, 0xd5, 0xd4, 0x65, 0x36, 0xcd, 0xb6, 0x31, 0xd4, 0xaf, 0xc3, 0xbb, 0x53,
	0x8f, 0x5b, 0x18, 0xe5, 0xc3, 0x6b, 0x32, 0x83, 0x0e, 0x58, 0x88, 0x3d, 0x7b, 0xf6, 0x11, 0xcc,
	0xff, 0xa5, 0x04, 0xb7, 0x1a, 0x32, 0x3a, 0x60, 0x12, 0x85, 0xb2, 0x04, 0x87, 0x28, 0x24, 0x67,
	0xf4, 0xf8, 0x80, 0xb5, 0xf9, 0x19, 0xbc, 0x1b, 0x2f, 0x5f, 0x9a, 0x2c, 0xaf, 0x7b, 0x19, 0x21,
	0x0b, 0x51, 0x58, 0x2b, 0x6d, 0x44, 0x76, 0x60, 0x3b, 0xa4, 0x0a, 0x1f, 0xb5, 0x6b, 0xb1, 0x50,
	0x1d, 0x6b, 0xe5, 0x30, 0x44, 0xaa, 0x40, 0xba, 0x22, 0x4e, 0xa8, 0xe8, 0x37, 0xa9, 0x8a, 0xb5,
	0x5c, 0xad, 0x22, 0x33, 0x74, 0xca, 0x8a, 0x76, 0x35, 0xe0, 0x29, 0x53, 0xa2, 0x9f, 0x93, 0x5a,
	0x57, 0x47, 0x51, 0xb2, 0x0b, 0x37, 0xba, 0x82, 0x3f, 0x8b, 0x59, 0x50, 0x54, 0x2f, 0x9b, 0x8d,
	0xe3, 0xb0, 0xd6, 0xa8, 0xf8, 0x73, 0x96, 0xef, 0xda, 0xca, 0x34, 0x0e, 0x41, 0xda, 0x3b, 0x45,
	0x7b, 0x75, 0x1e, 0xa2, 0x0b, 0x99, 0x77, 0x36, 0xd4, 0x93, 0x10, 0xb3, 0x80, 0x27, 0x58, 0x13,
	0x34, 0x78, 0x8a, 0xca, 0xdd, 0xde, 0x71, 0x76, 0xaf, 0xb5, 0x46, 0x41, 0xff, 0x33, 0xb8, 0x3d,
	0xaf, 0x37, 0x0b, 0xff, 0x11, 0xff, 0x3a, 0xf0, 0xce, 0x38, 0x41, 0x9d, 0x33, 0x45, 0x03, 0x75,
	0x09, 0xbd, 0x35, 0x8e, 0x9b, 0x62, 0xf7, 0xc3, 0x50, 0xa0, 0x94, 0xb6, 0xc7, 0x63, 0x28, 0x79,
	0x13, 0xd6, 0x31, 0xa1, 0xf1, 0xb1, 0xed, 0x72, 0x16, 0x68, 0x77, 0x13, 0x7e, 0x14, 0x1f, 0xe3,
	0x61, 0x87, 0x33, 0xb4, 0x8d, 0x1d, 0x86, 0xfc, 0x4f, 0xe1, 0xbd, 0x39, 0x87, 0x5b, 0x68, 0xce,
	0x9f, 0x57, 0xcc, 0xff, 0x67, 0x24, 0xbf, 0x85, 0x32, 0x0e, 0x91, 0x05, 0x78, 0x09, 0xf6, 0x68,
	0xf6, 0x6c, 0xf4, 0xf2, 0x6b, 0xc4, 0x86, 0xc4, 0x83, 0x72, 0x3e, 0x6b, 0xd6, 0x93, 0x22, 0xd6,
	0x17, 0x92, 0x9e, 0x30, 0xeb, 0x87, 0xf9, 0x6d, 0xf6, 0x73, 0xa9, 0xcc, 0x9c, 0x6d, 0xda, 0xfd,
	0x36, 0xd6, 0x55, 0xa8, 0x75, 0x3f, 0x1b, 0xe3, 0x3c, 0xd4, 0x06, 0x77, 0x78, 0x2a, 0xb1, 0x99,
	0x26, 0x47, 0x28, 0xf2, 0xf1, 0x1d, 0x82, 0xc8, 0x2d, 0xd8, 0xea, 0xf0, 0xc4, 0x36, 0x20, 0x1b,
	0xe0, 0x01, 0xe0, 0x7f, 0x0e, 0x77, 0xe6, 0xda, 0xb7, 0xb0, 0x01, 0xbf, 0x3a, 0x40, 0x0a, 0x86,
	0x2f, 0x7b, 0x34, 0x79, 0x28, 0x68, 0xa6, 0xf8, 0x02, 0x5d, 0xf7, 0xa0, 0x8c, 0x3d, 0x9a, 0x34,
	0x07, 0xb7, 0x77, 0x11, 0xeb, 0x41, 0x8c, 0xb4, 0x84, 0x7c, 0x10, 0x4d, 0xe0, 0x7f, 0x00, 0xde,
	0xa4, 0xca, 0x85, 0x87, 0x7b, 0x0a, 0xdb, 0x0d, 0x19, 0x1d, 0xd2, 0xfe, 0x63, 0xda, 0x43, 0x79,
	0xb1, 0x87, 0xf2, 0xf7, 0xe0, 0x8d, 0xa1, 0x62, 0x8b, 0xb4, 0xdd, 0xfd, 0xbb, 0x0c, 0xa5, 0x86,
	0x8c, 0xc8, 0x0f, 0x0e, 0x5c, 0x1f, 0x7b, 0x92, 0x3f, 0xac, 0x2e, 0xf5, 0x9e, 0x57, 0x27, 0x5e,
	0x67, 0xef, 0x8b, 0x55, 0x33, 0x0b, 0xb9, 0x3f, 0x3b, 0x40, 0xa6, 0x3c, 0xde, 0x9f, 0x2c, 0x4f,
	0x3c, 0x99, 0xed, 0x3d, 0x38, 0x4b, 0x76, 0x21, 0xed, 0x77, 0x07, 0x6e, 0xce, 0x7e, 0x22, 0xeb,
	0xcb, 0xd7, 0x98, 0x49, 0xe2, 0x7d, 0x7d, 0x0e, 0x24, 0x85, 0xde, 0xdf, 0x1c, 0x70, 0x67, 0xde,
	0xfa, 0xb5, 0x15, 0x2b, 0x0d, 0x71, 0x78, 0x5f, 0x9d, 0x9d, 0xa3, 0x10, 0xfb, 0x87, 0x03, 0xde,
	0x9c, 0x5b, 0xf8, 0xc1, 0x8a, 0xa5, 0x46, 0x58, 0xbc, 0x6f, 0xce, 0x83, 0xa5, 0x90, 0xfc, 0xa3,
	0x03, 0x37, 0xc6, 0xef, 0xad, 0x8f, 0x5e, 0xb5, 0x42, 0x91, 0xea, 0xdd, 0x5f, 0x39, 0xb5, 0x50,
	0xf4, 0x3d, 0x94, 0x8b, 0xcb, 0xe6, 0xee, 0xf2, 0x74, 0x79, 0x8e, 0xf7, 0xf1, 0xab, 0xe7, 0xe4,
	0xb5, 0x6b, 0x0f, 0xff, 0x3a, 0xa9, 0x38, 0x2f, 0x4e, 0x2a, 0xce, 0x7f, 0x27, 0x15, 0xe7, 0xa7,
	0xd3, 0xca, 0xda, 0x8b, 0xd3, 0xca, 0xda, 0x3f, 0xa7, 0x95, 0xb5, 0xef, 0xf6, 0xa6, 0x90, 0xee,
	0xf7, 0xf6, 0xa7, 0x7c, 0x4f, 0xf4, 0xbb, 0x28, 0x8f, 0x36, 0xcc, 0x37, 0xc5, 0xbd, 0x97, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x37, 0x80, 0x51, 0xd5, 0x71, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConfigureChain(ctx context.Context, in *MsgConfigureChain, opts ...grpc.CallOption) (*MsgConfigureChainResponse, error)
	RegisterNewStudent(ctx context.Context, in *MsgRegisterNewStudent, opts ...grpc.CallOption) (*MsgRegisterNewStudentResponse, error)
	InsertStudentPersonalInfo(ctx context.Context, in *MsgInsertStudentPersonalInfo, opts ...grpc.CallOption) (*MsgInsertStudentPersonalInfoResponse, error)
	InsertStudentContactInfo(ctx context.Context, in *MsgInsertStudentContactInfo, opts ...grpc.CallOption) (*MsgInsertStudentContactInfoResponse, error)
	InsertStudentResidenceInfo(ctx context.Context, in *MsgInsertStudentResidenceInfo, opts ...grpc.CallOption) (*MsgInsertStudentResidenceInfoResponse, error)
	InsertExamGrade(ctx context.Context, in *MsgInsertExamGrade, opts ...grpc.CallOption) (*MsgInsertExamGradeResponse, error)
	PayTaxes(ctx context.Context, in *MsgPayTaxes, opts ...grpc.CallOption) (*MsgPayTaxesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConfigureChain(ctx context.Context, in *MsgConfigureChain, opts ...grpc.CallOption) (*MsgConfigureChainResponse, error) {
	out := new(MsgConfigureChainResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/ConfigureChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterNewStudent(ctx context.Context, in *MsgRegisterNewStudent, opts ...grpc.CallOption) (*MsgRegisterNewStudentResponse, error) {
	out := new(MsgRegisterNewStudentResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/RegisterNewStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InsertStudentPersonalInfo(ctx context.Context, in *MsgInsertStudentPersonalInfo, opts ...grpc.CallOption) (*MsgInsertStudentPersonalInfoResponse, error) {
	out := new(MsgInsertStudentPersonalInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/InsertStudentPersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InsertStudentContactInfo(ctx context.Context, in *MsgInsertStudentContactInfo, opts ...grpc.CallOption) (*MsgInsertStudentContactInfoResponse, error) {
	out := new(MsgInsertStudentContactInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/InsertStudentContactInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InsertStudentResidenceInfo(ctx context.Context, in *MsgInsertStudentResidenceInfo, opts ...grpc.CallOption) (*MsgInsertStudentResidenceInfoResponse, error) {
	out := new(MsgInsertStudentResidenceInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/InsertStudentResidenceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InsertExamGrade(ctx context.Context, in *MsgInsertExamGrade, opts ...grpc.CallOption) (*MsgInsertExamGradeResponse, error) {
	out := new(MsgInsertExamGradeResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/InsertExamGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayTaxes(ctx context.Context, in *MsgPayTaxes, opts ...grpc.CallOption) (*MsgPayTaxesResponse, error) {
	out := new(MsgPayTaxesResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Msg/PayTaxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConfigureChain(context.Context, *MsgConfigureChain) (*MsgConfigureChainResponse, error)
	RegisterNewStudent(context.Context, *MsgRegisterNewStudent) (*MsgRegisterNewStudentResponse, error)
	InsertStudentPersonalInfo(context.Context, *MsgInsertStudentPersonalInfo) (*MsgInsertStudentPersonalInfoResponse, error)
	InsertStudentContactInfo(context.Context, *MsgInsertStudentContactInfo) (*MsgInsertStudentContactInfoResponse, error)
	InsertStudentResidenceInfo(context.Context, *MsgInsertStudentResidenceInfo) (*MsgInsertStudentResidenceInfoResponse, error)
	InsertExamGrade(context.Context, *MsgInsertExamGrade) (*MsgInsertExamGradeResponse, error)
	PayTaxes(context.Context, *MsgPayTaxes) (*MsgPayTaxesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConfigureChain(ctx context.Context, req *MsgConfigureChain) (*MsgConfigureChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureChain not implemented")
}
func (*UnimplementedMsgServer) RegisterNewStudent(ctx context.Context, req *MsgRegisterNewStudent) (*MsgRegisterNewStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewStudent not implemented")
}
func (*UnimplementedMsgServer) InsertStudentPersonalInfo(ctx context.Context, req *MsgInsertStudentPersonalInfo) (*MsgInsertStudentPersonalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertStudentPersonalInfo not implemented")
}
func (*UnimplementedMsgServer) InsertStudentContactInfo(ctx context.Context, req *MsgInsertStudentContactInfo) (*MsgInsertStudentContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertStudentContactInfo not implemented")
}
func (*UnimplementedMsgServer) InsertStudentResidenceInfo(ctx context.Context, req *MsgInsertStudentResidenceInfo) (*MsgInsertStudentResidenceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertStudentResidenceInfo not implemented")
}
func (*UnimplementedMsgServer) InsertExamGrade(ctx context.Context, req *MsgInsertExamGrade) (*MsgInsertExamGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertExamGrade not implemented")
}
func (*UnimplementedMsgServer) PayTaxes(ctx context.Context, req *MsgPayTaxes) (*MsgPayTaxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayTaxes not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConfigureChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfigureChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfigureChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/ConfigureChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfigureChain(ctx, req.(*MsgConfigureChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterNewStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterNewStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterNewStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/RegisterNewStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterNewStudent(ctx, req.(*MsgRegisterNewStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InsertStudentPersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInsertStudentPersonalInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InsertStudentPersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/InsertStudentPersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InsertStudentPersonalInfo(ctx, req.(*MsgInsertStudentPersonalInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InsertStudentContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInsertStudentContactInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InsertStudentContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/InsertStudentContactInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InsertStudentContactInfo(ctx, req.(*MsgInsertStudentContactInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InsertStudentResidenceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInsertStudentResidenceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InsertStudentResidenceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/InsertStudentResidenceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InsertStudentResidenceInfo(ctx, req.(*MsgInsertStudentResidenceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InsertExamGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInsertExamGrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InsertExamGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/InsertExamGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InsertExamGrade(ctx, req.(*MsgInsertExamGrade))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayTaxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayTaxes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayTaxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Msg/PayTaxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayTaxes(ctx, req.(*MsgPayTaxes))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "university_chain_it.universitychainit.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureChain",
			Handler:    _Msg_ConfigureChain_Handler,
		},
		{
			MethodName: "RegisterNewStudent",
			Handler:    _Msg_RegisterNewStudent_Handler,
		},
		{
			MethodName: "InsertStudentPersonalInfo",
			Handler:    _Msg_InsertStudentPersonalInfo_Handler,
		},
		{
			MethodName: "InsertStudentContactInfo",
			Handler:    _Msg_InsertStudentContactInfo_Handler,
		},
		{
			MethodName: "InsertStudentResidenceInfo",
			Handler:    _Msg_InsertStudentResidenceInfo_Handler,
		},
		{
			MethodName: "InsertExamGrade",
			Handler:    _Msg_InsertExamGrade_Handler,
		},
		{
			MethodName: "PayTaxes",
			Handler:    _Msg_PayTaxes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "universitychainit/tx.proto",
}

func (m *MsgConfigureChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfigureChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfigureChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfigureChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfigureChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfigureChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNewStudent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNewStudent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNewStudent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepartmentName) > 0 {
		i -= len(m.DepartmentName)
		copy(dAtA[i:], m.DepartmentName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepartmentName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CourseOfStudy) > 0 {
		i -= len(m.CourseOfStudy)
		copy(dAtA[i:], m.CourseOfStudy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseOfStudy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CourseType) > 0 {
		i -= len(m.CourseType)
		copy(dAtA[i:], m.CourseType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Surname) > 0 {
		i -= len(m.Surname)
		copy(dAtA[i:], m.Surname)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Surname)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterNewStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterNewStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterNewStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentPersonalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentPersonalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentPersonalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncomeBracket != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IncomeBracket))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TaxCode) > 0 {
		i -= len(m.TaxCode)
		copy(dAtA[i:], m.TaxCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaxCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TownOfBirth) > 0 {
		i -= len(m.TownOfBirth)
		copy(dAtA[i:], m.TownOfBirth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TownOfBirth)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProvinceOfBirth) > 0 {
		i -= len(m.ProvinceOfBirth)
		copy(dAtA[i:], m.ProvinceOfBirth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProvinceOfBirth)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CountryOfBirth) > 0 {
		i -= len(m.CountryOfBirth)
		copy(dAtA[i:], m.CountryOfBirth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CountryOfBirth)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PrimaryNationality) > 0 {
		i -= len(m.PrimaryNationality)
		copy(dAtA[i:], m.PrimaryNationality)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrimaryNationality)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DateOfBirth) > 0 {
		i -= len(m.DateOfBirth)
		copy(dAtA[i:], m.DateOfBirth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DateOfBirth)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentPersonalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentPersonalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentPersonalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentContactInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentContactInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentContactInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MobilePhone) > 0 {
		i -= len(m.MobilePhone)
		copy(dAtA[i:], m.MobilePhone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MobilePhone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContactAddress) > 0 {
		i -= len(m.ContactAddress)
		copy(dAtA[i:], m.ContactAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContactAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentContactInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentContactInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentContactInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentResidenceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentResidenceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentResidenceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomePhone) > 0 {
		i -= len(m.HomePhone)
		copy(dAtA[i:], m.HomePhone)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HomePhone)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.HouseNumber) > 0 {
		i -= len(m.HouseNumber)
		copy(dAtA[i:], m.HouseNumber)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HouseNumber)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PostCode) > 0 {
		i -= len(m.PostCode)
		copy(dAtA[i:], m.PostCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PostCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Town) > 0 {
		i -= len(m.Town)
		copy(dAtA[i:], m.Town)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Town)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Province) > 0 {
		i -= len(m.Province)
		copy(dAtA[i:], m.Province)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Province)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertStudentResidenceInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertStudentResidenceInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertStudentResidenceInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertExamGrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertExamGrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertExamGrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExamName) > 0 {
		i -= len(m.ExamName)
		copy(dAtA[i:], m.ExamName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExamName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInsertExamGradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInsertExamGradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInsertExamGradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayTaxes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayTaxes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayTaxes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentIndex) > 0 {
		i -= len(m.StudentIndex)
		copy(dAtA[i:], m.StudentIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.University) > 0 {
		i -= len(m.University)
		copy(dAtA[i:], m.University)
		i = encodeVarintTx(dAtA, i, uint64(len(m.University)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPayTaxesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPayTaxesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPayTaxesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConfigureChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConfigureChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgRegisterNewStudent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Surname)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseOfStudy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DepartmentName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterNewStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInsertStudentPersonalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DateOfBirth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrimaryNationality)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CountryOfBirth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProvinceOfBirth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TownOfBirth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaxCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IncomeBracket != 0 {
		n += 1 + sovTx(uint64(m.IncomeBracket))
	}
	return n
}

func (m *MsgInsertStudentPersonalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgInsertStudentContactInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContactAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MobilePhone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInsertStudentContactInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgInsertStudentResidenceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Province)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Town)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PostCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HouseNumber)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HomePhone)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInsertStudentResidenceInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgInsertExamGrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExamName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInsertExamGradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgPayTaxes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.University)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPayTaxesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConfigureChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfigureChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfigureChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfigureChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfigureChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfigureChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNewStudent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNewStudent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNewStudent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Surname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseOfStudy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseOfStudy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterNewStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterNewStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterNewStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentPersonalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentPersonalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentPersonalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryNationality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryNationality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvinceOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TownOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TownOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomeBracket", wireType)
			}
			m.IncomeBracket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomeBracket |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentPersonalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentPersonalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentPersonalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentContactInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentContactInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentContactInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobilePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobilePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentContactInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentContactInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentContactInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentResidenceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentResidenceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentResidenceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Province = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Town", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Town = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HouseNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomePhone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertStudentResidenceInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertStudentResidenceInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertStudentResidenceInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertExamGrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertExamGrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertExamGrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInsertExamGradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInsertExamGradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInsertExamGradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayTaxes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayTaxes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayTaxes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field University", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.University = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPayTaxesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPayTaxesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPayTaxesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
