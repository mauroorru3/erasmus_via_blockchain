// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetProfessorsExamsRequest struct {
	ExamName string `protobuf:"bytes,1,opt,name=examName,proto3" json:"examName,omitempty"`
}

func (m *QueryGetProfessorsExamsRequest) Reset()         { *m = QueryGetProfessorsExamsRequest{} }
func (m *QueryGetProfessorsExamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfessorsExamsRequest) ProtoMessage()    {}
func (*QueryGetProfessorsExamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{2}
}
func (m *QueryGetProfessorsExamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfessorsExamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfessorsExamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfessorsExamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfessorsExamsRequest.Merge(m, src)
}
func (m *QueryGetProfessorsExamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfessorsExamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfessorsExamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfessorsExamsRequest proto.InternalMessageInfo

func (m *QueryGetProfessorsExamsRequest) GetExamName() string {
	if m != nil {
		return m.ExamName
	}
	return ""
}

type QueryGetProfessorsExamsResponse struct {
	ProfessorsExams ProfessorsExams `protobuf:"bytes,1,opt,name=professorsExams,proto3" json:"professorsExams"`
}

func (m *QueryGetProfessorsExamsResponse) Reset()         { *m = QueryGetProfessorsExamsResponse{} }
func (m *QueryGetProfessorsExamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfessorsExamsResponse) ProtoMessage()    {}
func (*QueryGetProfessorsExamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{3}
}
func (m *QueryGetProfessorsExamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfessorsExamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfessorsExamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfessorsExamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfessorsExamsResponse.Merge(m, src)
}
func (m *QueryGetProfessorsExamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfessorsExamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfessorsExamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfessorsExamsResponse proto.InternalMessageInfo

func (m *QueryGetProfessorsExamsResponse) GetProfessorsExams() ProfessorsExams {
	if m != nil {
		return m.ProfessorsExams
	}
	return ProfessorsExams{}
}

type QueryAllProfessorsExamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfessorsExamsRequest) Reset()         { *m = QueryAllProfessorsExamsRequest{} }
func (m *QueryAllProfessorsExamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfessorsExamsRequest) ProtoMessage()    {}
func (*QueryAllProfessorsExamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{4}
}
func (m *QueryAllProfessorsExamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfessorsExamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfessorsExamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfessorsExamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfessorsExamsRequest.Merge(m, src)
}
func (m *QueryAllProfessorsExamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfessorsExamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfessorsExamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfessorsExamsRequest proto.InternalMessageInfo

func (m *QueryAllProfessorsExamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProfessorsExamsResponse struct {
	ProfessorsExams []ProfessorsExams   `protobuf:"bytes,1,rep,name=professorsExams,proto3" json:"professorsExams"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfessorsExamsResponse) Reset()         { *m = QueryAllProfessorsExamsResponse{} }
func (m *QueryAllProfessorsExamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfessorsExamsResponse) ProtoMessage()    {}
func (*QueryAllProfessorsExamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{5}
}
func (m *QueryAllProfessorsExamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfessorsExamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfessorsExamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfessorsExamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfessorsExamsResponse.Merge(m, src)
}
func (m *QueryAllProfessorsExamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfessorsExamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfessorsExamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfessorsExamsResponse proto.InternalMessageInfo

func (m *QueryAllProfessorsExamsResponse) GetProfessorsExams() []ProfessorsExams {
	if m != nil {
		return m.ProfessorsExams
	}
	return nil
}

func (m *QueryAllProfessorsExamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStudentInfoRequest struct {
}

func (m *QueryGetStudentInfoRequest) Reset()         { *m = QueryGetStudentInfoRequest{} }
func (m *QueryGetStudentInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentInfoRequest) ProtoMessage()    {}
func (*QueryGetStudentInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{6}
}
func (m *QueryGetStudentInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentInfoRequest.Merge(m, src)
}
func (m *QueryGetStudentInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentInfoRequest proto.InternalMessageInfo

type QueryGetStudentInfoResponse struct {
	StudentInfo StudentInfo `protobuf:"bytes,1,opt,name=StudentInfo,proto3" json:"StudentInfo"`
}

func (m *QueryGetStudentInfoResponse) Reset()         { *m = QueryGetStudentInfoResponse{} }
func (m *QueryGetStudentInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentInfoResponse) ProtoMessage()    {}
func (*QueryGetStudentInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{7}
}
func (m *QueryGetStudentInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentInfoResponse.Merge(m, src)
}
func (m *QueryGetStudentInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentInfoResponse proto.InternalMessageInfo

func (m *QueryGetStudentInfoResponse) GetStudentInfo() StudentInfo {
	if m != nil {
		return m.StudentInfo
	}
	return StudentInfo{}
}

type QueryGetExamsInfoRequest struct {
	ExamName string `protobuf:"bytes,1,opt,name=examName,proto3" json:"examName,omitempty"`
}

func (m *QueryGetExamsInfoRequest) Reset()         { *m = QueryGetExamsInfoRequest{} }
func (m *QueryGetExamsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExamsInfoRequest) ProtoMessage()    {}
func (*QueryGetExamsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{8}
}
func (m *QueryGetExamsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExamsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExamsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExamsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExamsInfoRequest.Merge(m, src)
}
func (m *QueryGetExamsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExamsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExamsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExamsInfoRequest proto.InternalMessageInfo

func (m *QueryGetExamsInfoRequest) GetExamName() string {
	if m != nil {
		return m.ExamName
	}
	return ""
}

type QueryGetExamsInfoResponse struct {
	ExamsInfo ExamsInfo `protobuf:"bytes,1,opt,name=examsInfo,proto3" json:"examsInfo"`
}

func (m *QueryGetExamsInfoResponse) Reset()         { *m = QueryGetExamsInfoResponse{} }
func (m *QueryGetExamsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExamsInfoResponse) ProtoMessage()    {}
func (*QueryGetExamsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{9}
}
func (m *QueryGetExamsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExamsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExamsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExamsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExamsInfoResponse.Merge(m, src)
}
func (m *QueryGetExamsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExamsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExamsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExamsInfoResponse proto.InternalMessageInfo

func (m *QueryGetExamsInfoResponse) GetExamsInfo() ExamsInfo {
	if m != nil {
		return m.ExamsInfo
	}
	return ExamsInfo{}
}

type QueryAllExamsInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExamsInfoRequest) Reset()         { *m = QueryAllExamsInfoRequest{} }
func (m *QueryAllExamsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExamsInfoRequest) ProtoMessage()    {}
func (*QueryAllExamsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{10}
}
func (m *QueryAllExamsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExamsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExamsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExamsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExamsInfoRequest.Merge(m, src)
}
func (m *QueryAllExamsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExamsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExamsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExamsInfoRequest proto.InternalMessageInfo

func (m *QueryAllExamsInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExamsInfoResponse struct {
	ExamsInfo  []ExamsInfo         `protobuf:"bytes,1,rep,name=examsInfo,proto3" json:"examsInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExamsInfoResponse) Reset()         { *m = QueryAllExamsInfoResponse{} }
func (m *QueryAllExamsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExamsInfoResponse) ProtoMessage()    {}
func (*QueryAllExamsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{11}
}
func (m *QueryAllExamsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExamsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExamsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExamsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExamsInfoResponse.Merge(m, src)
}
func (m *QueryAllExamsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExamsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExamsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExamsInfoResponse proto.InternalMessageInfo

func (m *QueryAllExamsInfoResponse) GetExamsInfo() []ExamsInfo {
	if m != nil {
		return m.ExamsInfo
	}
	return nil
}

func (m *QueryAllExamsInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTranscriptOfRecordsRequest struct {
}

func (m *QueryGetTranscriptOfRecordsRequest) Reset()         { *m = QueryGetTranscriptOfRecordsRequest{} }
func (m *QueryGetTranscriptOfRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTranscriptOfRecordsRequest) ProtoMessage()    {}
func (*QueryGetTranscriptOfRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{12}
}
func (m *QueryGetTranscriptOfRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTranscriptOfRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTranscriptOfRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTranscriptOfRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTranscriptOfRecordsRequest.Merge(m, src)
}
func (m *QueryGetTranscriptOfRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTranscriptOfRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTranscriptOfRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTranscriptOfRecordsRequest proto.InternalMessageInfo

type QueryGetTranscriptOfRecordsResponse struct {
	TranscriptOfRecords TranscriptOfRecords `protobuf:"bytes,1,opt,name=TranscriptOfRecords,proto3" json:"TranscriptOfRecords"`
}

func (m *QueryGetTranscriptOfRecordsResponse) Reset()         { *m = QueryGetTranscriptOfRecordsResponse{} }
func (m *QueryGetTranscriptOfRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTranscriptOfRecordsResponse) ProtoMessage()    {}
func (*QueryGetTranscriptOfRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{13}
}
func (m *QueryGetTranscriptOfRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTranscriptOfRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTranscriptOfRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTranscriptOfRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTranscriptOfRecordsResponse.Merge(m, src)
}
func (m *QueryGetTranscriptOfRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTranscriptOfRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTranscriptOfRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTranscriptOfRecordsResponse proto.InternalMessageInfo

func (m *QueryGetTranscriptOfRecordsResponse) GetTranscriptOfRecords() TranscriptOfRecords {
	if m != nil {
		return m.TranscriptOfRecords
	}
	return TranscriptOfRecords{}
}

type QueryGetPersonalInfoRequest struct {
}

func (m *QueryGetPersonalInfoRequest) Reset()         { *m = QueryGetPersonalInfoRequest{} }
func (m *QueryGetPersonalInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPersonalInfoRequest) ProtoMessage()    {}
func (*QueryGetPersonalInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{14}
}
func (m *QueryGetPersonalInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPersonalInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPersonalInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPersonalInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPersonalInfoRequest.Merge(m, src)
}
func (m *QueryGetPersonalInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPersonalInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPersonalInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPersonalInfoRequest proto.InternalMessageInfo

type QueryGetPersonalInfoResponse struct {
	PersonalInfo PersonalInfo `protobuf:"bytes,1,opt,name=PersonalInfo,proto3" json:"PersonalInfo"`
}

func (m *QueryGetPersonalInfoResponse) Reset()         { *m = QueryGetPersonalInfoResponse{} }
func (m *QueryGetPersonalInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPersonalInfoResponse) ProtoMessage()    {}
func (*QueryGetPersonalInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{15}
}
func (m *QueryGetPersonalInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPersonalInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPersonalInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPersonalInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPersonalInfoResponse.Merge(m, src)
}
func (m *QueryGetPersonalInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPersonalInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPersonalInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPersonalInfoResponse proto.InternalMessageInfo

func (m *QueryGetPersonalInfoResponse) GetPersonalInfo() PersonalInfo {
	if m != nil {
		return m.PersonalInfo
	}
	return PersonalInfo{}
}

type QueryGetResidenceInfoRequest struct {
}

func (m *QueryGetResidenceInfoRequest) Reset()         { *m = QueryGetResidenceInfoRequest{} }
func (m *QueryGetResidenceInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetResidenceInfoRequest) ProtoMessage()    {}
func (*QueryGetResidenceInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{16}
}
func (m *QueryGetResidenceInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetResidenceInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetResidenceInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetResidenceInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetResidenceInfoRequest.Merge(m, src)
}
func (m *QueryGetResidenceInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetResidenceInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetResidenceInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetResidenceInfoRequest proto.InternalMessageInfo

type QueryGetResidenceInfoResponse struct {
	ResidenceInfo ResidenceInfo `protobuf:"bytes,1,opt,name=ResidenceInfo,proto3" json:"ResidenceInfo"`
}

func (m *QueryGetResidenceInfoResponse) Reset()         { *m = QueryGetResidenceInfoResponse{} }
func (m *QueryGetResidenceInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetResidenceInfoResponse) ProtoMessage()    {}
func (*QueryGetResidenceInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{17}
}
func (m *QueryGetResidenceInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetResidenceInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetResidenceInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetResidenceInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetResidenceInfoResponse.Merge(m, src)
}
func (m *QueryGetResidenceInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetResidenceInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetResidenceInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetResidenceInfoResponse proto.InternalMessageInfo

func (m *QueryGetResidenceInfoResponse) GetResidenceInfo() ResidenceInfo {
	if m != nil {
		return m.ResidenceInfo
	}
	return ResidenceInfo{}
}

type QueryGetContactInfoRequest struct {
}

func (m *QueryGetContactInfoRequest) Reset()         { *m = QueryGetContactInfoRequest{} }
func (m *QueryGetContactInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetContactInfoRequest) ProtoMessage()    {}
func (*QueryGetContactInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{18}
}
func (m *QueryGetContactInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContactInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContactInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContactInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContactInfoRequest.Merge(m, src)
}
func (m *QueryGetContactInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContactInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContactInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContactInfoRequest proto.InternalMessageInfo

type QueryGetContactInfoResponse struct {
	ContactInfo ContactInfo `protobuf:"bytes,1,opt,name=ContactInfo,proto3" json:"ContactInfo"`
}

func (m *QueryGetContactInfoResponse) Reset()         { *m = QueryGetContactInfoResponse{} }
func (m *QueryGetContactInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetContactInfoResponse) ProtoMessage()    {}
func (*QueryGetContactInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a11fe59a0e65b096, []int{19}
}
func (m *QueryGetContactInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetContactInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetContactInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetContactInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetContactInfoResponse.Merge(m, src)
}
func (m *QueryGetContactInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetContactInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetContactInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetContactInfoResponse proto.InternalMessageInfo

func (m *QueryGetContactInfoResponse) GetContactInfo() ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return ContactInfo{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "university_chain_it.universitychainit.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "university_chain_it.universitychainit.QueryParamsResponse")
	proto.RegisterType((*QueryGetProfessorsExamsRequest)(nil), "university_chain_it.universitychainit.QueryGetProfessorsExamsRequest")
	proto.RegisterType((*QueryGetProfessorsExamsResponse)(nil), "university_chain_it.universitychainit.QueryGetProfessorsExamsResponse")
	proto.RegisterType((*QueryAllProfessorsExamsRequest)(nil), "university_chain_it.universitychainit.QueryAllProfessorsExamsRequest")
	proto.RegisterType((*QueryAllProfessorsExamsResponse)(nil), "university_chain_it.universitychainit.QueryAllProfessorsExamsResponse")
	proto.RegisterType((*QueryGetStudentInfoRequest)(nil), "university_chain_it.universitychainit.QueryGetStudentInfoRequest")
	proto.RegisterType((*QueryGetStudentInfoResponse)(nil), "university_chain_it.universitychainit.QueryGetStudentInfoResponse")
	proto.RegisterType((*QueryGetExamsInfoRequest)(nil), "university_chain_it.universitychainit.QueryGetExamsInfoRequest")
	proto.RegisterType((*QueryGetExamsInfoResponse)(nil), "university_chain_it.universitychainit.QueryGetExamsInfoResponse")
	proto.RegisterType((*QueryAllExamsInfoRequest)(nil), "university_chain_it.universitychainit.QueryAllExamsInfoRequest")
	proto.RegisterType((*QueryAllExamsInfoResponse)(nil), "university_chain_it.universitychainit.QueryAllExamsInfoResponse")
	proto.RegisterType((*QueryGetTranscriptOfRecordsRequest)(nil), "university_chain_it.universitychainit.QueryGetTranscriptOfRecordsRequest")
	proto.RegisterType((*QueryGetTranscriptOfRecordsResponse)(nil), "university_chain_it.universitychainit.QueryGetTranscriptOfRecordsResponse")
	proto.RegisterType((*QueryGetPersonalInfoRequest)(nil), "university_chain_it.universitychainit.QueryGetPersonalInfoRequest")
	proto.RegisterType((*QueryGetPersonalInfoResponse)(nil), "university_chain_it.universitychainit.QueryGetPersonalInfoResponse")
	proto.RegisterType((*QueryGetResidenceInfoRequest)(nil), "university_chain_it.universitychainit.QueryGetResidenceInfoRequest")
	proto.RegisterType((*QueryGetResidenceInfoResponse)(nil), "university_chain_it.universitychainit.QueryGetResidenceInfoResponse")
	proto.RegisterType((*QueryGetContactInfoRequest)(nil), "university_chain_it.universitychainit.QueryGetContactInfoRequest")
	proto.RegisterType((*QueryGetContactInfoResponse)(nil), "university_chain_it.universitychainit.QueryGetContactInfoResponse")
}

func init() { proto.RegisterFile("universitychainit/query.proto", fileDescriptor_a11fe59a0e65b096) }

var fileDescriptor_a11fe59a0e65b096 = []byte{
	// 1014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x77, 0x5a, 0x88, 0xc8, 0xb4, 0xa8, 0x62, 0xda, 0x43, 0x31, 0x89, 0x8b, 0x4c, 0x5b,
	0x2a, 0xa4, 0xb5, 0x49, 0xb6, 0x49, 0x95, 0x12, 0x08, 0xbb, 0x4d, 0x1b, 0xb5, 0x48, 0xb0, 0x2c,
	0x3d, 0x55, 0x42, 0x8b, 0x77, 0x33, 0xbb, 0xb5, 0xe4, 0x78, 0x1c, 0x8f, 0xb7, 0xca, 0x0a, 0xf5,
	0x00, 0x37, 0x0e, 0x48, 0x48, 0x9c, 0xf8, 0x47, 0x38, 0xf0, 0x17, 0xe4, 0xc0, 0x21, 0xfc, 0x92,
	0xe0, 0x82, 0x50, 0x92, 0x23, 0x27, 0xfe, 0x02, 0xb4, 0xe3, 0xe7, 0xf5, 0x78, 0x3d, 0x4e, 0xed,
	0xdd, 0xbd, 0x25, 0x9e, 0x79, 0xdf, 0xf9, 0x7e, 0x66, 0x9e, 0xdf, 0x1b, 0x2f, 0x5e, 0x1e, 0x78,
	0xce, 0x33, 0x1a, 0x70, 0x27, 0x1c, 0x76, 0x9f, 0xda, 0x8e, 0xe7, 0x84, 0xd6, 0xfe, 0x80, 0x06,
	0x43, 0xd3, 0x0f, 0x58, 0xc8, 0xc8, 0x8d, 0x64, 0xb8, 0x2d, 0xc6, 0xdb, 0x4e, 0x68, 0x66, 0x42,
	0xb4, 0x2b, 0x7d, 0xd6, 0x67, 0x22, 0xc2, 0x1a, 0xfd, 0x15, 0x05, 0x6b, 0x4b, 0x7d, 0xc6, 0xfa,
	0x2e, 0xb5, 0x6c, 0xdf, 0xb1, 0x6c, 0xcf, 0x63, 0xa1, 0x1d, 0x3a, 0xcc, 0xe3, 0x30, 0xfa, 0x4e,
	0x97, 0xf1, 0x3d, 0xc6, 0xad, 0x8e, 0xcd, 0x69, 0xb4, 0xa6, 0xf5, 0x6c, 0xa5, 0x43, 0x43, 0x7b,
	0xc5, 0xf2, 0xed, 0xbe, 0xe3, 0x89, 0xc9, 0x30, 0x57, 0xcf, 0xba, 0xf4, 0xed, 0xc0, 0xde, 0x8b,
	0xb5, 0x6e, 0x29, 0xc6, 0x03, 0xd6, 0xa3, 0x9c, 0xb3, 0x80, 0xb7, 0xe9, 0x41, 0x32, 0xf3, 0x7a,
	0x76, 0x26, 0x0f, 0x07, 0xbb, 0xd4, 0x0b, 0xdb, 0x8e, 0xd7, 0x8b, 0x9d, 0x1b, 0xd9, 0x59, 0x42,
	0x44, 0x9e, 0x53, 0xcd, 0xce, 0x09, 0x03, 0xdb, 0xe3, 0xdd, 0xc0, 0xf1, 0xc3, 0x36, 0xeb, 0xb5,
	0x03, 0xda, 0x65, 0xc1, 0x6e, 0xbc, 0xf0, 0x0d, 0x85, 0x45, 0x1a, 0x70, 0xe6, 0xd9, 0xae, 0xac,
	0x7a, 0x33, 0x3b, 0x2d, 0xa0, 0xdc, 0xd9, 0xa5, 0x5e, 0x97, 0xca, 0xf3, 0x14, 0x1c, 0x5d, 0xe6,
	0x85, 0x76, 0x57, 0xe6, 0x30, 0xae, 0x60, 0xf2, 0xe9, 0x68, 0x67, 0x9b, 0x62, 0xb3, 0x5a, 0x74,
	0x7f, 0x40, 0x79, 0x68, 0x74, 0xf0, 0xe5, 0xd4, 0x53, 0xee, 0x33, 0x8f, 0x53, 0xf2, 0x11, 0x5e,
	0x88, 0x36, 0xf5, 0x2a, 0x7a, 0x13, 0xdd, 0xba, 0xb0, 0x5a, 0x35, 0x0b, 0x1d, 0xbe, 0x19, 0xc9,
	0x34, 0x5e, 0x3a, 0xfc, 0xfb, 0x5a, 0xa5, 0x05, 0x12, 0xc6, 0x26, 0xd6, 0xc5, 0x1a, 0x3b, 0x34,
	0x6c, 0x8e, 0x4f, 0xe2, 0xfe, 0x41, 0xe2, 0x82, 0x68, 0xf8, 0x95, 0xd1, 0x9e, 0x7e, 0x6c, 0xef,
	0x51, 0xb1, 0xe0, 0x62, 0x6b, 0xfc, 0xbf, 0xf1, 0x0d, 0xc2, 0xd7, 0x72, 0xc3, 0xc1, 0x6e, 0x0f,
	0x5f, 0xf2, 0xd3, 0x43, 0xe0, 0x7b, 0xbd, 0xa8, 0xef, 0x74, 0x34, 0x00, 0x4c, 0x8a, 0x1a, 0x4f,
	0x81, 0xa4, 0xee, 0xba, 0x39, 0x24, 0x0f, 0x30, 0x4e, 0x32, 0x16, 0x4c, 0xdc, 0x34, 0xa3, 0xf4,
	0x36, 0x47, 0xe9, 0x6d, 0x46, 0xaf, 0x14, 0xa4, 0xb7, 0xd9, 0xb4, 0xfb, 0x14, 0x62, 0x5b, 0x52,
	0xa4, 0xf1, 0x6b, 0x4c, 0xad, 0x5a, 0xea, 0x2c, 0xea, 0xf3, 0x73, 0xa7, 0x26, 0x3b, 0x29, 0xa6,
	0x73, 0x82, 0xe9, 0xed, 0x17, 0x32, 0x45, 0x26, 0x53, 0x50, 0x4b, 0x58, 0x8b, 0x4f, 0xf2, 0xb3,
	0xe8, 0x45, 0x7b, 0xe8, 0xf5, 0x58, 0x9c, 0x8a, 0x43, 0xfc, 0x86, 0x72, 0x14, 0x68, 0x9f, 0xe0,
	0x0b, 0xd2, 0x63, 0xd8, 0xda, 0xd5, 0x82, 0xa4, 0x52, 0x24, 0x50, 0xca, 0x62, 0xc6, 0x3a, 0xbe,
	0x1a, 0x2f, 0x2d, 0x90, 0x25, 0x5b, 0x67, 0xe6, 0xe6, 0x3e, 0x7e, 0x5d, 0x11, 0x07, 0x86, 0x1f,
	0xe3, 0x45, 0x1a, 0x3f, 0x04, 0xbb, 0xef, 0x16, 0xb4, 0x3b, 0x16, 0x03, 0xb3, 0x89, 0x90, 0xd1,
	0x01, 0xab, 0x75, 0xd7, 0xcd, 0x58, 0x9d, 0x57, 0xf2, 0xfd, 0x84, 0x80, 0x2b, 0xbd, 0x88, 0x9a,
	0xeb, 0xfc, 0x5c, 0xb8, 0xe6, 0x97, 0x64, 0xd7, 0xb1, 0x11, 0x9f, 0xc9, 0xe3, 0x71, 0x0d, 0xfe,
	0xa4, 0xd7, 0x8a, 0x2a, 0x70, 0x9c, 0x6c, 0x3f, 0x20, 0xfc, 0xd6, 0x99, 0xd3, 0x00, 0x36, 0xc0,
	0x97, 0x15, 0xc3, 0xb0, 0xb7, 0x77, 0x0b, 0x62, 0x2b, 0x14, 0x60, 0x03, 0x54, 0xe2, 0xc6, 0x72,
	0xf2, 0x22, 0x34, 0xa1, 0x2d, 0xc8, 0xef, 0xc9, 0x73, 0xbc, 0xa4, 0x1e, 0x06, 0xcb, 0x9f, 0xe3,
	0x8b, 0xf2, 0x73, 0xf0, 0x5a, 0x2b, 0x5a, 0x13, 0xa4, 0x50, 0x30, 0x99, 0x92, 0x33, 0xf4, 0x64,
	0xf9, 0x56, 0xdc, 0x8d, 0x64, 0x7b, 0x5f, 0x21, 0xbc, 0x9c, 0x33, 0x01, 0x0c, 0x7e, 0x81, 0x5f,
	0x4d, 0x0d, 0x80, 0xc3, 0xdb, 0x05, 0x1d, 0xa6, 0x62, 0xc1, 0x62, 0x5a, 0x50, 0x2e, 0x34, 0xf7,
	0xa2, 0x4e, 0x98, 0x53, 0x68, 0x52, 0xa3, 0x49, 0xa1, 0x91, 0x1e, 0x97, 0x2c, 0x34, 0x52, 0x64,
	0x5c, 0x68, 0xa4, 0x47, 0xab, 0xdf, 0xbe, 0x86, 0x5f, 0x16, 0x6b, 0x93, 0x1f, 0x11, 0x5e, 0x88,
	0xba, 0x25, 0xd9, 0x28, 0xa8, 0x9d, 0x6d, 0xdf, 0xda, 0xdd, 0x69, 0x42, 0x23, 0x4e, 0x63, 0xed,
	0xeb, 0xdf, 0x4e, 0xbf, 0x3f, 0x67, 0x91, 0xaa, 0xa5, 0xd0, 0xb0, 0xf2, 0x6e, 0x59, 0xe4, 0x5f,
	0x84, 0x2f, 0x4d, 0x34, 0x0e, 0x72, 0xbf, 0x8c, 0x8d, 0xdc, 0x6b, 0x80, 0xf6, 0x60, 0x56, 0x19,
	0x20, 0x7b, 0x24, 0xc8, 0xb6, 0x49, 0xa3, 0x28, 0xd9, 0xc4, 0xfd, 0xd0, 0xfa, 0x32, 0xae, 0xf0,
	0xcf, 0xc9, 0x29, 0xc2, 0x64, 0x62, 0x9d, 0xba, 0xeb, 0x96, 0x23, 0xce, 0xbd, 0x2e, 0x94, 0x23,
	0xce, 0xbf, 0x0a, 0x18, 0x5b, 0x82, 0x78, 0x83, 0xdc, 0x99, 0x92, 0x98, 0xfc, 0x82, 0x52, 0xed,
	0x95, 0xd4, 0x4b, 0x1e, 0x45, 0xb6, 0x9f, 0x6b, 0x8d, 0x59, 0x24, 0x80, 0xeb, 0x3d, 0xc1, 0xb5,
	0x46, 0x6a, 0x05, 0xb9, 0xe4, 0xfb, 0x3b, 0xf9, 0x1d, 0xe1, 0xc5, 0x71, 0xc7, 0x21, 0x5b, 0x25,
	0xed, 0x4c, 0x76, 0x57, 0xed, 0xc3, 0xe9, 0x05, 0x80, 0x66, 0x5b, 0xd0, 0x7c, 0x40, 0x36, 0x0b,
	0xd2, 0x24, 0xdf, 0x19, 0x72, 0x46, 0xfe, 0x8c, 0xf0, 0xc5, 0xb1, 0xf6, 0x28, 0x17, 0xb7, 0x4a,
	0x26, 0xd1, 0x6c, 0x64, 0xaa, 0x3b, 0x81, 0xb1, 0x21, 0xc8, 0x6a, 0x64, 0xa5, 0x34, 0x19, 0xf9,
	0x0f, 0x29, 0x5b, 0x2c, 0x79, 0x58, 0x72, 0xbb, 0xf3, 0x9b, 0xbd, 0xf6, 0x68, 0x1e, 0x52, 0x53,
	0x9e, 0xa1, 0xf2, 0x3b, 0x90, 0xfc, 0x81, 0xd2, 0x4d, 0x9a, 0x94, 0x7d, 0x59, 0x14, 0x17, 0x03,
	0xed, 0xde, 0x4c, 0x1a, 0xc0, 0xb7, 0x29, 0xf8, 0xd6, 0xc9, 0xed, 0xa2, 0x95, 0x44, 0xfe, 0x70,
	0x25, 0x7f, 0xa1, 0x89, 0xde, 0x4e, 0xca, 0x9a, 0x52, 0xdd, 0x29, 0xb4, 0xed, 0xd9, 0x44, 0x00,
	0xed, 0x7d, 0x81, 0x76, 0x87, 0xac, 0x15, 0x44, 0x4b, 0x7f, 0x6c, 0x8b, 0x12, 0x29, 0xf5, 0xf2,
	0xd2, 0x25, 0x32, 0x7b, 0x13, 0x29, 0x5d, 0x22, 0x15, 0xd7, 0x95, 0xd2, 0x25, 0x52, 0xfe, 0x69,
	0xa0, 0xb1, 0x73, 0x78, 0xac, 0xa3, 0xa3, 0x63, 0x1d, 0xfd, 0x73, 0xac, 0xa3, 0xef, 0x4e, 0xf4,
	0xca, 0xd1, 0x89, 0x5e, 0xf9, 0xf3, 0x44, 0xaf, 0x3c, 0xa9, 0xaa, 0xd4, 0x0e, 0x54, 0x09, 0x3e,
	0xf4, 0x29, 0xef, 0x2c, 0x88, 0x1f, 0x19, 0x6a, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xdf,
	0x21, 0x0c, 0x44, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ProfessorsExams by index.
	ProfessorsExams(ctx context.Context, in *QueryGetProfessorsExamsRequest, opts ...grpc.CallOption) (*QueryGetProfessorsExamsResponse, error)
	// Queries a list of ProfessorsExams items.
	ProfessorsExamsAll(ctx context.Context, in *QueryAllProfessorsExamsRequest, opts ...grpc.CallOption) (*QueryAllProfessorsExamsResponse, error)
	// Queries a StudentInfo by index.
	StudentInfo(ctx context.Context, in *QueryGetStudentInfoRequest, opts ...grpc.CallOption) (*QueryGetStudentInfoResponse, error)
	// Queries a ExamsInfo by index.
	ExamsInfo(ctx context.Context, in *QueryGetExamsInfoRequest, opts ...grpc.CallOption) (*QueryGetExamsInfoResponse, error)
	// Queries a list of ExamsInfo items.
	ExamsInfoAll(ctx context.Context, in *QueryAllExamsInfoRequest, opts ...grpc.CallOption) (*QueryAllExamsInfoResponse, error)
	// Queries a TranscriptOfRecords by index.
	TranscriptOfRecords(ctx context.Context, in *QueryGetTranscriptOfRecordsRequest, opts ...grpc.CallOption) (*QueryGetTranscriptOfRecordsResponse, error)
	// Queries a PersonalInfo by index.
	PersonalInfo(ctx context.Context, in *QueryGetPersonalInfoRequest, opts ...grpc.CallOption) (*QueryGetPersonalInfoResponse, error)
	// Queries a ResidenceInfo by index.
	ResidenceInfo(ctx context.Context, in *QueryGetResidenceInfoRequest, opts ...grpc.CallOption) (*QueryGetResidenceInfoResponse, error)
	// Queries a ContactInfo by index.
	ContactInfo(ctx context.Context, in *QueryGetContactInfoRequest, opts ...grpc.CallOption) (*QueryGetContactInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProfessorsExams(ctx context.Context, in *QueryGetProfessorsExamsRequest, opts ...grpc.CallOption) (*QueryGetProfessorsExamsResponse, error) {
	out := new(QueryGetProfessorsExamsResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ProfessorsExams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProfessorsExamsAll(ctx context.Context, in *QueryAllProfessorsExamsRequest, opts ...grpc.CallOption) (*QueryAllProfessorsExamsResponse, error) {
	out := new(QueryAllProfessorsExamsResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ProfessorsExamsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudentInfo(ctx context.Context, in *QueryGetStudentInfoRequest, opts ...grpc.CallOption) (*QueryGetStudentInfoResponse, error) {
	out := new(QueryGetStudentInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/StudentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExamsInfo(ctx context.Context, in *QueryGetExamsInfoRequest, opts ...grpc.CallOption) (*QueryGetExamsInfoResponse, error) {
	out := new(QueryGetExamsInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ExamsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExamsInfoAll(ctx context.Context, in *QueryAllExamsInfoRequest, opts ...grpc.CallOption) (*QueryAllExamsInfoResponse, error) {
	out := new(QueryAllExamsInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ExamsInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TranscriptOfRecords(ctx context.Context, in *QueryGetTranscriptOfRecordsRequest, opts ...grpc.CallOption) (*QueryGetTranscriptOfRecordsResponse, error) {
	out := new(QueryGetTranscriptOfRecordsResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/TranscriptOfRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PersonalInfo(ctx context.Context, in *QueryGetPersonalInfoRequest, opts ...grpc.CallOption) (*QueryGetPersonalInfoResponse, error) {
	out := new(QueryGetPersonalInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/PersonalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResidenceInfo(ctx context.Context, in *QueryGetResidenceInfoRequest, opts ...grpc.CallOption) (*QueryGetResidenceInfoResponse, error) {
	out := new(QueryGetResidenceInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ResidenceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContactInfo(ctx context.Context, in *QueryGetContactInfoRequest, opts ...grpc.CallOption) (*QueryGetContactInfoResponse, error) {
	out := new(QueryGetContactInfoResponse)
	err := c.cc.Invoke(ctx, "/university_chain_it.universitychainit.Query/ContactInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ProfessorsExams by index.
	ProfessorsExams(context.Context, *QueryGetProfessorsExamsRequest) (*QueryGetProfessorsExamsResponse, error)
	// Queries a list of ProfessorsExams items.
	ProfessorsExamsAll(context.Context, *QueryAllProfessorsExamsRequest) (*QueryAllProfessorsExamsResponse, error)
	// Queries a StudentInfo by index.
	StudentInfo(context.Context, *QueryGetStudentInfoRequest) (*QueryGetStudentInfoResponse, error)
	// Queries a ExamsInfo by index.
	ExamsInfo(context.Context, *QueryGetExamsInfoRequest) (*QueryGetExamsInfoResponse, error)
	// Queries a list of ExamsInfo items.
	ExamsInfoAll(context.Context, *QueryAllExamsInfoRequest) (*QueryAllExamsInfoResponse, error)
	// Queries a TranscriptOfRecords by index.
	TranscriptOfRecords(context.Context, *QueryGetTranscriptOfRecordsRequest) (*QueryGetTranscriptOfRecordsResponse, error)
	// Queries a PersonalInfo by index.
	PersonalInfo(context.Context, *QueryGetPersonalInfoRequest) (*QueryGetPersonalInfoResponse, error)
	// Queries a ResidenceInfo by index.
	ResidenceInfo(context.Context, *QueryGetResidenceInfoRequest) (*QueryGetResidenceInfoResponse, error)
	// Queries a ContactInfo by index.
	ContactInfo(context.Context, *QueryGetContactInfoRequest) (*QueryGetContactInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ProfessorsExams(ctx context.Context, req *QueryGetProfessorsExamsRequest) (*QueryGetProfessorsExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfessorsExams not implemented")
}
func (*UnimplementedQueryServer) ProfessorsExamsAll(ctx context.Context, req *QueryAllProfessorsExamsRequest) (*QueryAllProfessorsExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfessorsExamsAll not implemented")
}
func (*UnimplementedQueryServer) StudentInfo(ctx context.Context, req *QueryGetStudentInfoRequest) (*QueryGetStudentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentInfo not implemented")
}
func (*UnimplementedQueryServer) ExamsInfo(ctx context.Context, req *QueryGetExamsInfoRequest) (*QueryGetExamsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamsInfo not implemented")
}
func (*UnimplementedQueryServer) ExamsInfoAll(ctx context.Context, req *QueryAllExamsInfoRequest) (*QueryAllExamsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamsInfoAll not implemented")
}
func (*UnimplementedQueryServer) TranscriptOfRecords(ctx context.Context, req *QueryGetTranscriptOfRecordsRequest) (*QueryGetTranscriptOfRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscriptOfRecords not implemented")
}
func (*UnimplementedQueryServer) PersonalInfo(ctx context.Context, req *QueryGetPersonalInfoRequest) (*QueryGetPersonalInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalInfo not implemented")
}
func (*UnimplementedQueryServer) ResidenceInfo(ctx context.Context, req *QueryGetResidenceInfoRequest) (*QueryGetResidenceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResidenceInfo not implemented")
}
func (*UnimplementedQueryServer) ContactInfo(ctx context.Context, req *QueryGetContactInfoRequest) (*QueryGetContactInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProfessorsExams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfessorsExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProfessorsExams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ProfessorsExams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProfessorsExams(ctx, req.(*QueryGetProfessorsExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProfessorsExamsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProfessorsExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProfessorsExamsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ProfessorsExamsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProfessorsExamsAll(ctx, req.(*QueryAllProfessorsExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/StudentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudentInfo(ctx, req.(*QueryGetStudentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExamsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExamsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExamsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ExamsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExamsInfo(ctx, req.(*QueryGetExamsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExamsInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExamsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExamsInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ExamsInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExamsInfoAll(ctx, req.(*QueryAllExamsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TranscriptOfRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTranscriptOfRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TranscriptOfRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/TranscriptOfRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TranscriptOfRecords(ctx, req.(*QueryGetTranscriptOfRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PersonalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPersonalInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PersonalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/PersonalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PersonalInfo(ctx, req.(*QueryGetPersonalInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResidenceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetResidenceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResidenceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ResidenceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResidenceInfo(ctx, req.(*QueryGetResidenceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContactInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetContactInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContactInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/university_chain_it.universitychainit.Query/ContactInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContactInfo(ctx, req.(*QueryGetContactInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "university_chain_it.universitychainit.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ProfessorsExams",
			Handler:    _Query_ProfessorsExams_Handler,
		},
		{
			MethodName: "ProfessorsExamsAll",
			Handler:    _Query_ProfessorsExamsAll_Handler,
		},
		{
			MethodName: "StudentInfo",
			Handler:    _Query_StudentInfo_Handler,
		},
		{
			MethodName: "ExamsInfo",
			Handler:    _Query_ExamsInfo_Handler,
		},
		{
			MethodName: "ExamsInfoAll",
			Handler:    _Query_ExamsInfoAll_Handler,
		},
		{
			MethodName: "TranscriptOfRecords",
			Handler:    _Query_TranscriptOfRecords_Handler,
		},
		{
			MethodName: "PersonalInfo",
			Handler:    _Query_PersonalInfo_Handler,
		},
		{
			MethodName: "ResidenceInfo",
			Handler:    _Query_ResidenceInfo_Handler,
		},
		{
			MethodName: "ContactInfo",
			Handler:    _Query_ContactInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "universitychainit/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProfessorsExamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfessorsExamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfessorsExamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExamName) > 0 {
		i -= len(m.ExamName)
		copy(dAtA[i:], m.ExamName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfessorsExamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfessorsExamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfessorsExamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProfessorsExams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProfessorsExamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfessorsExamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfessorsExamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProfessorsExamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfessorsExamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfessorsExamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProfessorsExams) > 0 {
		for iNdEx := len(m.ProfessorsExams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProfessorsExams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StudentInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetExamsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExamsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExamsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExamName) > 0 {
		i -= len(m.ExamName)
		copy(dAtA[i:], m.ExamName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExamName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExamsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExamsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExamsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExamsInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExamsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExamsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExamsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExamsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExamsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExamsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExamsInfo) > 0 {
		for iNdEx := len(m.ExamsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExamsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTranscriptOfRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTranscriptOfRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTranscriptOfRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTranscriptOfRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTranscriptOfRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTranscriptOfRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TranscriptOfRecords.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPersonalInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPersonalInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPersonalInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPersonalInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPersonalInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPersonalInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PersonalInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetResidenceInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetResidenceInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetResidenceInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetResidenceInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetResidenceInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetResidenceInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ResidenceInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetContactInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContactInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContactInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetContactInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetContactInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetContactInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContactInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProfessorsExamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExamName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfessorsExamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProfessorsExams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProfessorsExamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProfessorsExamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfessorsExams) > 0 {
		for _, e := range m.ProfessorsExams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetStudentInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StudentInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetExamsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExamName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExamsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExamsInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExamsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExamsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExamsInfo) > 0 {
		for _, e := range m.ExamsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTranscriptOfRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTranscriptOfRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TranscriptOfRecords.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPersonalInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPersonalInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PersonalInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetResidenceInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetResidenceInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ResidenceInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetContactInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetContactInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContactInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfessorsExamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfessorsExamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfessorsExamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfessorsExamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfessorsExamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfessorsExamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorsExams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProfessorsExams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfessorsExamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfessorsExamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfessorsExamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfessorsExamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfessorsExamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfessorsExamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorsExams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorsExams = append(m.ProfessorsExams, ProfessorsExams{})
			if err := m.ProfessorsExams[len(m.ProfessorsExams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StudentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExamsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExamsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExamsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExamsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExamsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExamsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExamsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExamsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExamsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExamsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExamsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExamsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExamsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExamsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExamsInfo = append(m.ExamsInfo, ExamsInfo{})
			if err := m.ExamsInfo[len(m.ExamsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTranscriptOfRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTranscriptOfRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTranscriptOfRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTranscriptOfRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTranscriptOfRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTranscriptOfRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscriptOfRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TranscriptOfRecords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPersonalInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPersonalInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPersonalInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPersonalInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPersonalInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPersonalInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PersonalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetResidenceInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetResidenceInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetResidenceInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetResidenceInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetResidenceInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetResidenceInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidenceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResidenceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContactInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContactInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContactInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetContactInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetContactInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetContactInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContactInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
