// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: universitychainit/student_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StudentInfo struct {
	Name                     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Surname                  string `protobuf:"bytes,2,opt,name=surname,proto3" json:"surname,omitempty"`
	CourseType               string `protobuf:"bytes,3,opt,name=courseType,proto3" json:"courseType,omitempty"`
	CourseOfStudy            string `protobuf:"bytes,4,opt,name=courseOfStudy,proto3" json:"courseOfStudy,omitempty"`
	Status                   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	CurrentYearOfStudy       uint32 `protobuf:"varint,6,opt,name=currentYearOfStudy,proto3" json:"currentYearOfStudy,omitempty"`
	OutOfCourse              bool   `protobuf:"varint,7,opt,name=outOfCourse,proto3" json:"outOfCourse,omitempty"`
	NumberOfYearsOutOfCourse uint32 `protobuf:"varint,8,opt,name=numberOfYearsOutOfCourse,proto3" json:"numberOfYearsOutOfCourse,omitempty"`
	StudentKey               string `protobuf:"bytes,9,opt,name=studentKey,proto3" json:"studentKey,omitempty"`
}

func (m *StudentInfo) Reset()         { *m = StudentInfo{} }
func (m *StudentInfo) String() string { return proto.CompactTextString(m) }
func (*StudentInfo) ProtoMessage()    {}
func (*StudentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_81270e748c9b2568, []int{0}
}
func (m *StudentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentInfo.Merge(m, src)
}
func (m *StudentInfo) XXX_Size() int {
	return m.Size()
}
func (m *StudentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StudentInfo proto.InternalMessageInfo

func (m *StudentInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StudentInfo) GetSurname() string {
	if m != nil {
		return m.Surname
	}
	return ""
}

func (m *StudentInfo) GetCourseType() string {
	if m != nil {
		return m.CourseType
	}
	return ""
}

func (m *StudentInfo) GetCourseOfStudy() string {
	if m != nil {
		return m.CourseOfStudy
	}
	return ""
}

func (m *StudentInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StudentInfo) GetCurrentYearOfStudy() uint32 {
	if m != nil {
		return m.CurrentYearOfStudy
	}
	return 0
}

func (m *StudentInfo) GetOutOfCourse() bool {
	if m != nil {
		return m.OutOfCourse
	}
	return false
}

func (m *StudentInfo) GetNumberOfYearsOutOfCourse() uint32 {
	if m != nil {
		return m.NumberOfYearsOutOfCourse
	}
	return 0
}

func (m *StudentInfo) GetStudentKey() string {
	if m != nil {
		return m.StudentKey
	}
	return ""
}

func init() {
	proto.RegisterType((*StudentInfo)(nil), "university_chain_it.universitychainit.StudentInfo")
}

func init() {
	proto.RegisterFile("universitychainit/student_info.proto", fileDescriptor_81270e748c9b2568)
}

var fileDescriptor_81270e748c9b2568 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe3, 0xfe, 0xfd, 0xd3, 0xd6, 0x55, 0x17, 0x0f, 0xc8, 0x93, 0x15, 0xa1, 0x22, 0x65,
	0x21, 0x19, 0xd8, 0x18, 0x61, 0x40, 0x88, 0x21, 0x52, 0x60, 0x81, 0x25, 0x4a, 0x83, 0x23, 0x3c,
	0xd4, 0x8e, 0xec, 0x6b, 0x44, 0xde, 0x82, 0xb7, 0x82, 0xb1, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0xc5,
	0x69, 0xd5, 0xa0, 0x96, 0x2d, 0xf7, 0x3b, 0xe7, 0x9e, 0xe8, 0xfa, 0xe0, 0xa5, 0x95, 0xe2, 0x95,
	0x6b, 0x23, 0xa0, 0x2e, 0x5e, 0x72, 0x21, 0x05, 0xc4, 0x06, 0xec, 0x33, 0x97, 0x90, 0x09, 0x59,
	0xaa, 0xa8, 0xd2, 0x0a, 0x14, 0x39, 0xdb, 0xbb, 0x32, 0x67, 0xcb, 0x04, 0x44, 0x07, 0x9b, 0xa7,
	0x1f, 0x23, 0x3c, 0xbf, 0xef, 0xb7, 0x6f, 0x65, 0xa9, 0x08, 0xc1, 0x63, 0x99, 0xaf, 0x39, 0x45,
	0x01, 0x0a, 0x67, 0xa9, 0xfb, 0x26, 0x14, 0x4f, 0x8c, 0xd5, 0x0e, 0x8f, 0x1c, 0xde, 0x8d, 0x84,
	0x61, 0x5c, 0x28, 0xab, 0x0d, 0x7f, 0xa8, 0x2b, 0x4e, 0xff, 0x39, 0x71, 0x40, 0xc8, 0x12, 0x2f,
	0xfa, 0x29, 0x29, 0xbb, 0x9f, 0xd4, 0x74, 0xec, 0x2c, 0xbf, 0x21, 0x39, 0xc1, 0xbe, 0x81, 0x1c,
	0xac, 0xa1, 0xff, 0x9d, 0xbc, 0x9d, 0x48, 0x84, 0x49, 0x61, 0xb5, 0xe6, 0x12, 0x1e, 0x79, 0xae,
	0x77, 0x11, 0x7e, 0x80, 0xc2, 0x45, 0x7a, 0x44, 0x21, 0x01, 0x9e, 0x2b, 0x0b, 0x49, 0x79, 0xed,
	0xd2, 0xe9, 0x24, 0x40, 0xe1, 0x34, 0x1d, 0x22, 0x72, 0x89, 0xa9, 0xb4, 0xeb, 0x15, 0xd7, 0x49,
	0xd9, 0x2d, 0x9a, 0x64, 0x60, 0x9f, 0xba, 0xdc, 0x3f, 0xf5, 0xee, 0xd6, 0xed, 0x33, 0xdf, 0xf1,
	0x9a, 0xce, 0xfa, 0x5b, 0xf7, 0xe4, 0xea, 0xe6, 0xb3, 0x61, 0x68, 0xd3, 0x30, 0xf4, 0xdd, 0x30,
	0xf4, 0xde, 0x32, 0x6f, 0xd3, 0x32, 0xef, 0xab, 0x65, 0xde, 0xd3, 0xf9, 0x91, 0x2a, 0xe2, 0xb7,
	0xf8, 0xb0, 0x46, 0xa8, 0x2b, 0x6e, 0x56, 0xbe, 0x2b, 0xf0, 0xe2, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x6b, 0x08, 0x15, 0xd0, 0xe8, 0x01, 0x00, 0x00,
}

func (m *StudentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentKey) > 0 {
		i -= len(m.StudentKey)
		copy(dAtA[i:], m.StudentKey)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.StudentKey)))
		i--
		dAtA[i] = 0x4a
	}
	if m.NumberOfYearsOutOfCourse != 0 {
		i = encodeVarintStudentInfo(dAtA, i, uint64(m.NumberOfYearsOutOfCourse))
		i--
		dAtA[i] = 0x40
	}
	if m.OutOfCourse {
		i--
		if m.OutOfCourse {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentYearOfStudy != 0 {
		i = encodeVarintStudentInfo(dAtA, i, uint64(m.CurrentYearOfStudy))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CourseOfStudy) > 0 {
		i -= len(m.CourseOfStudy)
		copy(dAtA[i:], m.CourseOfStudy)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.CourseOfStudy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CourseType) > 0 {
		i -= len(m.CourseType)
		copy(dAtA[i:], m.CourseType)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.CourseType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Surname) > 0 {
		i -= len(m.Surname)
		copy(dAtA[i:], m.Surname)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.Surname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudentInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudentInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudentInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StudentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	l = len(m.Surname)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	l = len(m.CourseType)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	l = len(m.CourseOfStudy)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	if m.CurrentYearOfStudy != 0 {
		n += 1 + sovStudentInfo(uint64(m.CurrentYearOfStudy))
	}
	if m.OutOfCourse {
		n += 2
	}
	if m.NumberOfYearsOutOfCourse != 0 {
		n += 1 + sovStudentInfo(uint64(m.NumberOfYearsOutOfCourse))
	}
	l = len(m.StudentKey)
	if l > 0 {
		n += 1 + l + sovStudentInfo(uint64(l))
	}
	return n
}

func sovStudentInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudentInfo(x uint64) (n int) {
	return sovStudentInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StudentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudentInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Surname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseOfStudy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseOfStudy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentYearOfStudy", wireType)
			}
			m.CurrentYearOfStudy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentYearOfStudy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOfCourse", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OutOfCourse = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfYearsOutOfCourse", wireType)
			}
			m.NumberOfYearsOutOfCourse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfYearsOutOfCourse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudentInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudentInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudentInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudentInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudentInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudentInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudentInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudentInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudentInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudentInfo = fmt.Errorf("proto: unexpected end of group")
)
